<?php
/**
 * CreateaccountRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Antera Api v1
 *
 * Antera API v1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateaccountRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateaccountRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateaccountRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'parent_account' => '\Swagger\Client\Model\ParentAccount',
'type' => 'string',
'created' => 'string',
'shipping' => '\Swagger\Client\Model\Shipping',
'sales_rep' => '\Swagger\Client\Model\SalesRep',
'phone' => 'string',
'fax' => 'string',
'status' => 'string',
'shipping_account_type' => 'string',
'billing' => '\Swagger\Client\Model\Billing',
'csr' => '\Swagger\Client\Model\Csr',
'customer_note' => 'string',
'alternate_account_number' => 'string',
'credit_terms' => 'string',
'tax_no' => 'string',
'taxable' => 'string',
'credit_limit' => 'string',
'tax_rate' => 'string',
'multi_tax_rate' => 'string',
'email' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'parent_account' => null,
'type' => null,
'created' => null,
'shipping' => null,
'sales_rep' => null,
'phone' => null,
'fax' => null,
'status' => null,
'shipping_account_type' => null,
'billing' => null,
'csr' => null,
'customer_note' => null,
'alternate_account_number' => null,
'credit_terms' => null,
'tax_no' => null,
'taxable' => null,
'credit_limit' => null,
'tax_rate' => null,
'multi_tax_rate' => null,
'email' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'parent_account' => 'parentAccount',
'type' => 'type',
'created' => 'created',
'shipping' => 'shipping',
'sales_rep' => 'salesRep',
'phone' => 'phone',
'fax' => 'fax',
'status' => 'status',
'shipping_account_type' => 'shippingAccountType',
'billing' => 'billing',
'csr' => 'csr',
'customer_note' => 'customerNote',
'alternate_account_number' => 'alternateAccountNumber',
'credit_terms' => 'creditTerms',
'tax_no' => 'taxNo',
'taxable' => 'taxable',
'credit_limit' => 'creditLimit',
'tax_rate' => 'taxRate',
'multi_tax_rate' => 'multiTaxRate',
'email' => 'email'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'parent_account' => 'setParentAccount',
'type' => 'setType',
'created' => 'setCreated',
'shipping' => 'setShipping',
'sales_rep' => 'setSalesRep',
'phone' => 'setPhone',
'fax' => 'setFax',
'status' => 'setStatus',
'shipping_account_type' => 'setShippingAccountType',
'billing' => 'setBilling',
'csr' => 'setCsr',
'customer_note' => 'setCustomerNote',
'alternate_account_number' => 'setAlternateAccountNumber',
'credit_terms' => 'setCreditTerms',
'tax_no' => 'setTaxNo',
'taxable' => 'setTaxable',
'credit_limit' => 'setCreditLimit',
'tax_rate' => 'setTaxRate',
'multi_tax_rate' => 'setMultiTaxRate',
'email' => 'setEmail'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'parent_account' => 'getParentAccount',
'type' => 'getType',
'created' => 'getCreated',
'shipping' => 'getShipping',
'sales_rep' => 'getSalesRep',
'phone' => 'getPhone',
'fax' => 'getFax',
'status' => 'getStatus',
'shipping_account_type' => 'getShippingAccountType',
'billing' => 'getBilling',
'csr' => 'getCsr',
'customer_note' => 'getCustomerNote',
'alternate_account_number' => 'getAlternateAccountNumber',
'credit_terms' => 'getCreditTerms',
'tax_no' => 'getTaxNo',
'taxable' => 'getTaxable',
'credit_limit' => 'getCreditLimit',
'tax_rate' => 'getTaxRate',
'multi_tax_rate' => 'getMultiTaxRate',
'email' => 'getEmail'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent_account'] = isset($data['parent_account']) ? $data['parent_account'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['shipping'] = isset($data['shipping']) ? $data['shipping'] : null;
        $this->container['sales_rep'] = isset($data['sales_rep']) ? $data['sales_rep'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['shipping_account_type'] = isset($data['shipping_account_type']) ? $data['shipping_account_type'] : null;
        $this->container['billing'] = isset($data['billing']) ? $data['billing'] : null;
        $this->container['csr'] = isset($data['csr']) ? $data['csr'] : null;
        $this->container['customer_note'] = isset($data['customer_note']) ? $data['customer_note'] : null;
        $this->container['alternate_account_number'] = isset($data['alternate_account_number']) ? $data['alternate_account_number'] : null;
        $this->container['credit_terms'] = isset($data['credit_terms']) ? $data['credit_terms'] : null;
        $this->container['tax_no'] = isset($data['tax_no']) ? $data['tax_no'] : null;
        $this->container['taxable'] = isset($data['taxable']) ? $data['taxable'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['multi_tax_rate'] = isset($data['multi_tax_rate']) ? $data['multi_tax_rate'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['parent_account'] === null) {
            $invalidProperties[] = "'parent_account' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['shipping'] === null) {
            $invalidProperties[] = "'shipping' can't be null";
        }
        if ($this->container['sales_rep'] === null) {
            $invalidProperties[] = "'sales_rep' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['fax'] === null) {
            $invalidProperties[] = "'fax' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['shipping_account_type'] === null) {
            $invalidProperties[] = "'shipping_account_type' can't be null";
        }
        if ($this->container['billing'] === null) {
            $invalidProperties[] = "'billing' can't be null";
        }
        if ($this->container['csr'] === null) {
            $invalidProperties[] = "'csr' can't be null";
        }
        if ($this->container['customer_note'] === null) {
            $invalidProperties[] = "'customer_note' can't be null";
        }
        if ($this->container['alternate_account_number'] === null) {
            $invalidProperties[] = "'alternate_account_number' can't be null";
        }
        if ($this->container['credit_terms'] === null) {
            $invalidProperties[] = "'credit_terms' can't be null";
        }
        if ($this->container['tax_no'] === null) {
            $invalidProperties[] = "'tax_no' can't be null";
        }
        if ($this->container['taxable'] === null) {
            $invalidProperties[] = "'taxable' can't be null";
        }
        if ($this->container['credit_limit'] === null) {
            $invalidProperties[] = "'credit_limit' can't be null";
        }
        if ($this->container['tax_rate'] === null) {
            $invalidProperties[] = "'tax_rate' can't be null";
        }
        if ($this->container['multi_tax_rate'] === null) {
            $invalidProperties[] = "'multi_tax_rate' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_account
     *
     * @return \Swagger\Client\Model\ParentAccount
     */
    public function getParentAccount()
    {
        return $this->container['parent_account'];
    }

    /**
     * Sets parent_account
     *
     * @param \Swagger\Client\Model\ParentAccount $parent_account parent_account
     *
     * @return $this
     */
    public function setParentAccount($parent_account)
    {
        $this->container['parent_account'] = $parent_account;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \Swagger\Client\Model\Shipping
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \Swagger\Client\Model\Shipping $shipping shipping
     *
     * @return $this
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets sales_rep
     *
     * @return \Swagger\Client\Model\SalesRep
     */
    public function getSalesRep()
    {
        return $this->container['sales_rep'];
    }

    /**
     * Sets sales_rep
     *
     * @param \Swagger\Client\Model\SalesRep $sales_rep sales_rep
     *
     * @return $this
     */
    public function setSalesRep($sales_rep)
    {
        $this->container['sales_rep'] = $sales_rep;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets shipping_account_type
     *
     * @return string
     */
    public function getShippingAccountType()
    {
        return $this->container['shipping_account_type'];
    }

    /**
     * Sets shipping_account_type
     *
     * @param string $shipping_account_type shipping_account_type
     *
     * @return $this
     */
    public function setShippingAccountType($shipping_account_type)
    {
        $this->container['shipping_account_type'] = $shipping_account_type;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \Swagger\Client\Model\Billing
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \Swagger\Client\Model\Billing $billing billing
     *
     * @return $this
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets csr
     *
     * @return \Swagger\Client\Model\Csr
     */
    public function getCsr()
    {
        return $this->container['csr'];
    }

    /**
     * Sets csr
     *
     * @param \Swagger\Client\Model\Csr $csr csr
     *
     * @return $this
     */
    public function setCsr($csr)
    {
        $this->container['csr'] = $csr;

        return $this;
    }

    /**
     * Gets customer_note
     *
     * @return string
     */
    public function getCustomerNote()
    {
        return $this->container['customer_note'];
    }

    /**
     * Sets customer_note
     *
     * @param string $customer_note customer_note
     *
     * @return $this
     */
    public function setCustomerNote($customer_note)
    {
        $this->container['customer_note'] = $customer_note;

        return $this;
    }

    /**
     * Gets alternate_account_number
     *
     * @return string
     */
    public function getAlternateAccountNumber()
    {
        return $this->container['alternate_account_number'];
    }

    /**
     * Sets alternate_account_number
     *
     * @param string $alternate_account_number alternate_account_number
     *
     * @return $this
     */
    public function setAlternateAccountNumber($alternate_account_number)
    {
        $this->container['alternate_account_number'] = $alternate_account_number;

        return $this;
    }

    /**
     * Gets credit_terms
     *
     * @return string
     */
    public function getCreditTerms()
    {
        return $this->container['credit_terms'];
    }

    /**
     * Sets credit_terms
     *
     * @param string $credit_terms credit_terms
     *
     * @return $this
     */
    public function setCreditTerms($credit_terms)
    {
        $this->container['credit_terms'] = $credit_terms;

        return $this;
    }

    /**
     * Gets tax_no
     *
     * @return string
     */
    public function getTaxNo()
    {
        return $this->container['tax_no'];
    }

    /**
     * Sets tax_no
     *
     * @param string $tax_no tax_no
     *
     * @return $this
     */
    public function setTaxNo($tax_no)
    {
        $this->container['tax_no'] = $tax_no;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return string
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param string $taxable taxable
     *
     * @return $this
     */
    public function setTaxable($taxable)
    {
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return string
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param string $credit_limit credit_limit
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return string
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param string $tax_rate tax_rate
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets multi_tax_rate
     *
     * @return string
     */
    public function getMultiTaxRate()
    {
        return $this->container['multi_tax_rate'];
    }

    /**
     * Sets multi_tax_rate
     *
     * @param string $multi_tax_rate multi_tax_rate
     *
     * @return $this
     */
    public function setMultiTaxRate($multi_tax_rate)
    {
        $this->container['multi_tax_rate'] = $multi_tax_rate;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
