<?php
/**
 * CreateproductRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Antera Api v1
 *
 * Antera API v1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateproductRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateproductRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateproductRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'po_type' => 'string',
'division' => 'string',
'tax_enabled' => 'bool',
'product_type' => 'string',
'antera_id' => 'string',
'inhouse_id' => 'string',
'product_id' => 'string',
'item_code' => 'string',
'product_name' => 'string',
'description' => 'string',
'vendor_name' => 'string',
'vendor_id' => 'string',
'assigned_user_id' => 'string',
'assigned_user_name' => 'string',
'qb_expense_account' => 'string',
'qb_income_account' => 'string',
'qb_asset_account' => 'string',
'imprintinfo' => 'string',
'lot' => 'string',
'production' => 'string',
'sequence' => 'string',
'uom_set_ref' => 'string',
'rebate' => 'string',
'coop' => 'string',
'clone_id' => 'string',
'special_price' => 'string',
'package' => 'string',
'weight' => 'string',
'product_category_array' => 'string[]',
'width' => 'string',
'height' => 'string',
'depth' => 'string',
'store_array' => 'string[]',
'source' => 'string',
'product_part_array' => 'object',
'media_content' => 'string[]',
'perm_user_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'po_type' => null,
'division' => null,
'tax_enabled' => null,
'product_type' => null,
'antera_id' => null,
'inhouse_id' => null,
'product_id' => null,
'item_code' => null,
'product_name' => null,
'description' => null,
'vendor_name' => null,
'vendor_id' => null,
'assigned_user_id' => null,
'assigned_user_name' => null,
'qb_expense_account' => null,
'qb_income_account' => null,
'qb_asset_account' => null,
'imprintinfo' => null,
'lot' => null,
'production' => null,
'sequence' => null,
'uom_set_ref' => null,
'rebate' => null,
'coop' => null,
'clone_id' => null,
'special_price' => null,
'package' => null,
'weight' => null,
'product_category_array' => null,
'width' => null,
'height' => null,
'depth' => null,
'store_array' => null,
'source' => null,
'product_part_array' => null,
'media_content' => null,
'perm_user_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'po_type' => 'poType',
'division' => 'division',
'tax_enabled' => 'taxEnabled',
'product_type' => 'productType',
'antera_id' => 'anteraID',
'inhouse_id' => 'inhouseId',
'product_id' => 'productId',
'item_code' => 'itemCode',
'product_name' => 'productName',
'description' => 'description',
'vendor_name' => 'vendorName',
'vendor_id' => 'vendorId',
'assigned_user_id' => 'assignedUserId',
'assigned_user_name' => 'assignedUserName',
'qb_expense_account' => 'qbExpenseAccount',
'qb_income_account' => 'qbIncomeAccount',
'qb_asset_account' => 'qbAssetAccount',
'imprintinfo' => 'imprintinfo',
'lot' => 'lot',
'production' => 'production',
'sequence' => 'sequence',
'uom_set_ref' => 'uomSetRef',
'rebate' => 'rebate',
'coop' => 'coop',
'clone_id' => 'cloneId',
'special_price' => 'specialPrice',
'package' => 'package',
'weight' => 'weight',
'product_category_array' => 'ProductCategoryArray',
'width' => 'width',
'height' => 'height',
'depth' => 'depth',
'store_array' => 'StoreArray',
'source' => 'source',
'product_part_array' => 'ProductPartArray',
'media_content' => 'MediaContent',
'perm_user_id' => 'permUserId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'po_type' => 'setPoType',
'division' => 'setDivision',
'tax_enabled' => 'setTaxEnabled',
'product_type' => 'setProductType',
'antera_id' => 'setAnteraId',
'inhouse_id' => 'setInhouseId',
'product_id' => 'setProductId',
'item_code' => 'setItemCode',
'product_name' => 'setProductName',
'description' => 'setDescription',
'vendor_name' => 'setVendorName',
'vendor_id' => 'setVendorId',
'assigned_user_id' => 'setAssignedUserId',
'assigned_user_name' => 'setAssignedUserName',
'qb_expense_account' => 'setQbExpenseAccount',
'qb_income_account' => 'setQbIncomeAccount',
'qb_asset_account' => 'setQbAssetAccount',
'imprintinfo' => 'setImprintinfo',
'lot' => 'setLot',
'production' => 'setProduction',
'sequence' => 'setSequence',
'uom_set_ref' => 'setUomSetRef',
'rebate' => 'setRebate',
'coop' => 'setCoop',
'clone_id' => 'setCloneId',
'special_price' => 'setSpecialPrice',
'package' => 'setPackage',
'weight' => 'setWeight',
'product_category_array' => 'setProductCategoryArray',
'width' => 'setWidth',
'height' => 'setHeight',
'depth' => 'setDepth',
'store_array' => 'setStoreArray',
'source' => 'setSource',
'product_part_array' => 'setProductPartArray',
'media_content' => 'setMediaContent',
'perm_user_id' => 'setPermUserId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'po_type' => 'getPoType',
'division' => 'getDivision',
'tax_enabled' => 'getTaxEnabled',
'product_type' => 'getProductType',
'antera_id' => 'getAnteraId',
'inhouse_id' => 'getInhouseId',
'product_id' => 'getProductId',
'item_code' => 'getItemCode',
'product_name' => 'getProductName',
'description' => 'getDescription',
'vendor_name' => 'getVendorName',
'vendor_id' => 'getVendorId',
'assigned_user_id' => 'getAssignedUserId',
'assigned_user_name' => 'getAssignedUserName',
'qb_expense_account' => 'getQbExpenseAccount',
'qb_income_account' => 'getQbIncomeAccount',
'qb_asset_account' => 'getQbAssetAccount',
'imprintinfo' => 'getImprintinfo',
'lot' => 'getLot',
'production' => 'getProduction',
'sequence' => 'getSequence',
'uom_set_ref' => 'getUomSetRef',
'rebate' => 'getRebate',
'coop' => 'getCoop',
'clone_id' => 'getCloneId',
'special_price' => 'getSpecialPrice',
'package' => 'getPackage',
'weight' => 'getWeight',
'product_category_array' => 'getProductCategoryArray',
'width' => 'getWidth',
'height' => 'getHeight',
'depth' => 'getDepth',
'store_array' => 'getStoreArray',
'source' => 'getSource',
'product_part_array' => 'getProductPartArray',
'media_content' => 'getMediaContent',
'perm_user_id' => 'getPermUserId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['po_type'] = isset($data['po_type']) ? $data['po_type'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['tax_enabled'] = isset($data['tax_enabled']) ? $data['tax_enabled'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['antera_id'] = isset($data['antera_id']) ? $data['antera_id'] : null;
        $this->container['inhouse_id'] = isset($data['inhouse_id']) ? $data['inhouse_id'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['item_code'] = isset($data['item_code']) ? $data['item_code'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['vendor_name'] = isset($data['vendor_name']) ? $data['vendor_name'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['assigned_user_id'] = isset($data['assigned_user_id']) ? $data['assigned_user_id'] : null;
        $this->container['assigned_user_name'] = isset($data['assigned_user_name']) ? $data['assigned_user_name'] : null;
        $this->container['qb_expense_account'] = isset($data['qb_expense_account']) ? $data['qb_expense_account'] : null;
        $this->container['qb_income_account'] = isset($data['qb_income_account']) ? $data['qb_income_account'] : null;
        $this->container['qb_asset_account'] = isset($data['qb_asset_account']) ? $data['qb_asset_account'] : null;
        $this->container['imprintinfo'] = isset($data['imprintinfo']) ? $data['imprintinfo'] : null;
        $this->container['lot'] = isset($data['lot']) ? $data['lot'] : null;
        $this->container['production'] = isset($data['production']) ? $data['production'] : null;
        $this->container['sequence'] = isset($data['sequence']) ? $data['sequence'] : null;
        $this->container['uom_set_ref'] = isset($data['uom_set_ref']) ? $data['uom_set_ref'] : null;
        $this->container['rebate'] = isset($data['rebate']) ? $data['rebate'] : null;
        $this->container['coop'] = isset($data['coop']) ? $data['coop'] : null;
        $this->container['clone_id'] = isset($data['clone_id']) ? $data['clone_id'] : null;
        $this->container['special_price'] = isset($data['special_price']) ? $data['special_price'] : null;
        $this->container['package'] = isset($data['package']) ? $data['package'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['product_category_array'] = isset($data['product_category_array']) ? $data['product_category_array'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['store_array'] = isset($data['store_array']) ? $data['store_array'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['product_part_array'] = isset($data['product_part_array']) ? $data['product_part_array'] : null;
        $this->container['media_content'] = isset($data['media_content']) ? $data['media_content'] : null;
        $this->container['perm_user_id'] = isset($data['perm_user_id']) ? $data['perm_user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['po_type'] === null) {
            $invalidProperties[] = "'po_type' can't be null";
        }
        if ($this->container['division'] === null) {
            $invalidProperties[] = "'division' can't be null";
        }
        if ($this->container['tax_enabled'] === null) {
            $invalidProperties[] = "'tax_enabled' can't be null";
        }
        if ($this->container['product_type'] === null) {
            $invalidProperties[] = "'product_type' can't be null";
        }
        if ($this->container['antera_id'] === null) {
            $invalidProperties[] = "'antera_id' can't be null";
        }
        if ($this->container['inhouse_id'] === null) {
            $invalidProperties[] = "'inhouse_id' can't be null";
        }
        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['item_code'] === null) {
            $invalidProperties[] = "'item_code' can't be null";
        }
        if ($this->container['product_name'] === null) {
            $invalidProperties[] = "'product_name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['vendor_name'] === null) {
            $invalidProperties[] = "'vendor_name' can't be null";
        }
        if ($this->container['vendor_id'] === null) {
            $invalidProperties[] = "'vendor_id' can't be null";
        }
        if ($this->container['assigned_user_id'] === null) {
            $invalidProperties[] = "'assigned_user_id' can't be null";
        }
        if ($this->container['assigned_user_name'] === null) {
            $invalidProperties[] = "'assigned_user_name' can't be null";
        }
        if ($this->container['qb_expense_account'] === null) {
            $invalidProperties[] = "'qb_expense_account' can't be null";
        }
        if ($this->container['qb_income_account'] === null) {
            $invalidProperties[] = "'qb_income_account' can't be null";
        }
        if ($this->container['qb_asset_account'] === null) {
            $invalidProperties[] = "'qb_asset_account' can't be null";
        }
        if ($this->container['imprintinfo'] === null) {
            $invalidProperties[] = "'imprintinfo' can't be null";
        }
        if ($this->container['lot'] === null) {
            $invalidProperties[] = "'lot' can't be null";
        }
        if ($this->container['production'] === null) {
            $invalidProperties[] = "'production' can't be null";
        }
        if ($this->container['sequence'] === null) {
            $invalidProperties[] = "'sequence' can't be null";
        }
        if ($this->container['uom_set_ref'] === null) {
            $invalidProperties[] = "'uom_set_ref' can't be null";
        }
        if ($this->container['rebate'] === null) {
            $invalidProperties[] = "'rebate' can't be null";
        }
        if ($this->container['coop'] === null) {
            $invalidProperties[] = "'coop' can't be null";
        }
        if ($this->container['clone_id'] === null) {
            $invalidProperties[] = "'clone_id' can't be null";
        }
        if ($this->container['special_price'] === null) {
            $invalidProperties[] = "'special_price' can't be null";
        }
        if ($this->container['package'] === null) {
            $invalidProperties[] = "'package' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if ($this->container['product_category_array'] === null) {
            $invalidProperties[] = "'product_category_array' can't be null";
        }
        if ($this->container['width'] === null) {
            $invalidProperties[] = "'width' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        if ($this->container['depth'] === null) {
            $invalidProperties[] = "'depth' can't be null";
        }
        if ($this->container['store_array'] === null) {
            $invalidProperties[] = "'store_array' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['product_part_array'] === null) {
            $invalidProperties[] = "'product_part_array' can't be null";
        }
        if ($this->container['media_content'] === null) {
            $invalidProperties[] = "'media_content' can't be null";
        }
        if ($this->container['perm_user_id'] === null) {
            $invalidProperties[] = "'perm_user_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets po_type
     *
     * @return string
     */
    public function getPoType()
    {
        return $this->container['po_type'];
    }

    /**
     * Sets po_type
     *
     * @param string $po_type po_type
     *
     * @return $this
     */
    public function setPoType($po_type)
    {
        $this->container['po_type'] = $po_type;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string $division division
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets tax_enabled
     *
     * @return bool
     */
    public function getTaxEnabled()
    {
        return $this->container['tax_enabled'];
    }

    /**
     * Sets tax_enabled
     *
     * @param bool $tax_enabled tax_enabled
     *
     * @return $this
     */
    public function setTaxEnabled($tax_enabled)
    {
        $this->container['tax_enabled'] = $tax_enabled;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string $product_type product_type
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets antera_id
     *
     * @return string
     */
    public function getAnteraId()
    {
        return $this->container['antera_id'];
    }

    /**
     * Sets antera_id
     *
     * @param string $antera_id antera_id
     *
     * @return $this
     */
    public function setAnteraId($antera_id)
    {
        $this->container['antera_id'] = $antera_id;

        return $this;
    }

    /**
     * Gets inhouse_id
     *
     * @return string
     */
    public function getInhouseId()
    {
        return $this->container['inhouse_id'];
    }

    /**
     * Sets inhouse_id
     *
     * @param string $inhouse_id inhouse_id
     *
     * @return $this
     */
    public function setInhouseId($inhouse_id)
    {
        $this->container['inhouse_id'] = $inhouse_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets item_code
     *
     * @return string
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     *
     * @param string $item_code item_code
     *
     * @return $this
     */
    public function setItemCode($item_code)
    {
        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets vendor_name
     *
     * @return string
     */
    public function getVendorName()
    {
        return $this->container['vendor_name'];
    }

    /**
     * Sets vendor_name
     *
     * @param string $vendor_name vendor_name
     *
     * @return $this
     */
    public function setVendorName($vendor_name)
    {
        $this->container['vendor_name'] = $vendor_name;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return string
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param string $vendor_id vendor_id
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets assigned_user_id
     *
     * @return string
     */
    public function getAssignedUserId()
    {
        return $this->container['assigned_user_id'];
    }

    /**
     * Sets assigned_user_id
     *
     * @param string $assigned_user_id assigned_user_id
     *
     * @return $this
     */
    public function setAssignedUserId($assigned_user_id)
    {
        $this->container['assigned_user_id'] = $assigned_user_id;

        return $this;
    }

    /**
     * Gets assigned_user_name
     *
     * @return string
     */
    public function getAssignedUserName()
    {
        return $this->container['assigned_user_name'];
    }

    /**
     * Sets assigned_user_name
     *
     * @param string $assigned_user_name assigned_user_name
     *
     * @return $this
     */
    public function setAssignedUserName($assigned_user_name)
    {
        $this->container['assigned_user_name'] = $assigned_user_name;

        return $this;
    }

    /**
     * Gets qb_expense_account
     *
     * @return string
     */
    public function getQbExpenseAccount()
    {
        return $this->container['qb_expense_account'];
    }

    /**
     * Sets qb_expense_account
     *
     * @param string $qb_expense_account qb_expense_account
     *
     * @return $this
     */
    public function setQbExpenseAccount($qb_expense_account)
    {
        $this->container['qb_expense_account'] = $qb_expense_account;

        return $this;
    }

    /**
     * Gets qb_income_account
     *
     * @return string
     */
    public function getQbIncomeAccount()
    {
        return $this->container['qb_income_account'];
    }

    /**
     * Sets qb_income_account
     *
     * @param string $qb_income_account qb_income_account
     *
     * @return $this
     */
    public function setQbIncomeAccount($qb_income_account)
    {
        $this->container['qb_income_account'] = $qb_income_account;

        return $this;
    }

    /**
     * Gets qb_asset_account
     *
     * @return string
     */
    public function getQbAssetAccount()
    {
        return $this->container['qb_asset_account'];
    }

    /**
     * Sets qb_asset_account
     *
     * @param string $qb_asset_account qb_asset_account
     *
     * @return $this
     */
    public function setQbAssetAccount($qb_asset_account)
    {
        $this->container['qb_asset_account'] = $qb_asset_account;

        return $this;
    }

    /**
     * Gets imprintinfo
     *
     * @return string
     */
    public function getImprintinfo()
    {
        return $this->container['imprintinfo'];
    }

    /**
     * Sets imprintinfo
     *
     * @param string $imprintinfo imprintinfo
     *
     * @return $this
     */
    public function setImprintinfo($imprintinfo)
    {
        $this->container['imprintinfo'] = $imprintinfo;

        return $this;
    }

    /**
     * Gets lot
     *
     * @return string
     */
    public function getLot()
    {
        return $this->container['lot'];
    }

    /**
     * Sets lot
     *
     * @param string $lot lot
     *
     * @return $this
     */
    public function setLot($lot)
    {
        $this->container['lot'] = $lot;

        return $this;
    }

    /**
     * Gets production
     *
     * @return string
     */
    public function getProduction()
    {
        return $this->container['production'];
    }

    /**
     * Sets production
     *
     * @param string $production production
     *
     * @return $this
     */
    public function setProduction($production)
    {
        $this->container['production'] = $production;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return string
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param string $sequence sequence
     *
     * @return $this
     */
    public function setSequence($sequence)
    {
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets uom_set_ref
     *
     * @return string
     */
    public function getUomSetRef()
    {
        return $this->container['uom_set_ref'];
    }

    /**
     * Sets uom_set_ref
     *
     * @param string $uom_set_ref uom_set_ref
     *
     * @return $this
     */
    public function setUomSetRef($uom_set_ref)
    {
        $this->container['uom_set_ref'] = $uom_set_ref;

        return $this;
    }

    /**
     * Gets rebate
     *
     * @return string
     */
    public function getRebate()
    {
        return $this->container['rebate'];
    }

    /**
     * Sets rebate
     *
     * @param string $rebate rebate
     *
     * @return $this
     */
    public function setRebate($rebate)
    {
        $this->container['rebate'] = $rebate;

        return $this;
    }

    /**
     * Gets coop
     *
     * @return string
     */
    public function getCoop()
    {
        return $this->container['coop'];
    }

    /**
     * Sets coop
     *
     * @param string $coop coop
     *
     * @return $this
     */
    public function setCoop($coop)
    {
        $this->container['coop'] = $coop;

        return $this;
    }

    /**
     * Gets clone_id
     *
     * @return string
     */
    public function getCloneId()
    {
        return $this->container['clone_id'];
    }

    /**
     * Sets clone_id
     *
     * @param string $clone_id clone_id
     *
     * @return $this
     */
    public function setCloneId($clone_id)
    {
        $this->container['clone_id'] = $clone_id;

        return $this;
    }

    /**
     * Gets special_price
     *
     * @return string
     */
    public function getSpecialPrice()
    {
        return $this->container['special_price'];
    }

    /**
     * Sets special_price
     *
     * @param string $special_price special_price
     *
     * @return $this
     */
    public function setSpecialPrice($special_price)
    {
        $this->container['special_price'] = $special_price;

        return $this;
    }

    /**
     * Gets package
     *
     * @return string
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param string $package package
     *
     * @return $this
     */
    public function setPackage($package)
    {
        $this->container['package'] = $package;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return string
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets product_category_array
     *
     * @return string[]
     */
    public function getProductCategoryArray()
    {
        return $this->container['product_category_array'];
    }

    /**
     * Sets product_category_array
     *
     * @param string[] $product_category_array product_category_array
     *
     * @return $this
     */
    public function setProductCategoryArray($product_category_array)
    {
        $this->container['product_category_array'] = $product_category_array;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return string
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param string $depth depth
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets store_array
     *
     * @return string[]
     */
    public function getStoreArray()
    {
        return $this->container['store_array'];
    }

    /**
     * Sets store_array
     *
     * @param string[] $store_array store_array
     *
     * @return $this
     */
    public function setStoreArray($store_array)
    {
        $this->container['store_array'] = $store_array;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets product_part_array
     *
     * @return object
     */
    public function getProductPartArray()
    {
        return $this->container['product_part_array'];
    }

    /**
     * Sets product_part_array
     *
     * @param object $product_part_array product_part_array
     *
     * @return $this
     */
    public function setProductPartArray($product_part_array)
    {
        $this->container['product_part_array'] = $product_part_array;

        return $this;
    }

    /**
     * Gets media_content
     *
     * @return string[]
     */
    public function getMediaContent()
    {
        return $this->container['media_content'];
    }

    /**
     * Sets media_content
     *
     * @param string[] $media_content media_content
     *
     * @return $this
     */
    public function setMediaContent($media_content)
    {
        $this->container['media_content'] = $media_content;

        return $this;
    }

    /**
     * Gets perm_user_id
     *
     * @return string
     */
    public function getPermUserId()
    {
        return $this->container['perm_user_id'];
    }

    /**
     * Sets perm_user_id
     *
     * @param string $perm_user_id perm_user_id
     *
     * @return $this
     */
    public function setPermUserId($perm_user_id)
    {
        $this->container['perm_user_id'] = $perm_user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
