<?php
/**
 * Datum
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Antera Api v1
 *
 * Antera API v1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Datum Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Datum implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Datum';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'product_id' => 'string',
'product_name' => 'string',
'inhouse_id' => 'string',
'media_content' => 'string[]',
'colors' => 'string',
'disabled' => 'string',
'vendor_id' => 'string',
'vendor_name' => 'string',
'date_created' => 'string',
'date_modified' => 'string',
'shell' => 'string',
'source' => 'string',
'source_id' => 'string',
'stores' => 'string',
'sizes' => 'string',
'product_category_array' => '\Swagger\Client\Model\ProductCategoryArray[]',
'store_array' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'product_id' => null,
'product_name' => null,
'inhouse_id' => null,
'media_content' => null,
'colors' => null,
'disabled' => null,
'vendor_id' => null,
'vendor_name' => null,
'date_created' => null,
'date_modified' => null,
'shell' => null,
'source' => null,
'source_id' => null,
'stores' => null,
'sizes' => null,
'product_category_array' => null,
'store_array' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'product_id' => 'productId',
'product_name' => 'productName',
'inhouse_id' => 'inhouseId',
'media_content' => 'MediaContent',
'colors' => 'colors',
'disabled' => 'disabled',
'vendor_id' => 'vendorId',
'vendor_name' => 'vendorName',
'date_created' => 'dateCreated',
'date_modified' => 'dateModified',
'shell' => 'shell',
'source' => 'source',
'source_id' => 'sourceId',
'stores' => 'stores',
'sizes' => 'sizes',
'product_category_array' => 'ProductCategoryArray',
'store_array' => 'StoreArray'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'product_id' => 'setProductId',
'product_name' => 'setProductName',
'inhouse_id' => 'setInhouseId',
'media_content' => 'setMediaContent',
'colors' => 'setColors',
'disabled' => 'setDisabled',
'vendor_id' => 'setVendorId',
'vendor_name' => 'setVendorName',
'date_created' => 'setDateCreated',
'date_modified' => 'setDateModified',
'shell' => 'setShell',
'source' => 'setSource',
'source_id' => 'setSourceId',
'stores' => 'setStores',
'sizes' => 'setSizes',
'product_category_array' => 'setProductCategoryArray',
'store_array' => 'setStoreArray'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'product_id' => 'getProductId',
'product_name' => 'getProductName',
'inhouse_id' => 'getInhouseId',
'media_content' => 'getMediaContent',
'colors' => 'getColors',
'disabled' => 'getDisabled',
'vendor_id' => 'getVendorId',
'vendor_name' => 'getVendorName',
'date_created' => 'getDateCreated',
'date_modified' => 'getDateModified',
'shell' => 'getShell',
'source' => 'getSource',
'source_id' => 'getSourceId',
'stores' => 'getStores',
'sizes' => 'getSizes',
'product_category_array' => 'getProductCategoryArray',
'store_array' => 'getStoreArray'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['inhouse_id'] = isset($data['inhouse_id']) ? $data['inhouse_id'] : null;
        $this->container['media_content'] = isset($data['media_content']) ? $data['media_content'] : null;
        $this->container['colors'] = isset($data['colors']) ? $data['colors'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['vendor_name'] = isset($data['vendor_name']) ? $data['vendor_name'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_modified'] = isset($data['date_modified']) ? $data['date_modified'] : null;
        $this->container['shell'] = isset($data['shell']) ? $data['shell'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['stores'] = isset($data['stores']) ? $data['stores'] : null;
        $this->container['sizes'] = isset($data['sizes']) ? $data['sizes'] : null;
        $this->container['product_category_array'] = isset($data['product_category_array']) ? $data['product_category_array'] : null;
        $this->container['store_array'] = isset($data['store_array']) ? $data['store_array'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['product_name'] === null) {
            $invalidProperties[] = "'product_name' can't be null";
        }
        if ($this->container['inhouse_id'] === null) {
            $invalidProperties[] = "'inhouse_id' can't be null";
        }
        if ($this->container['media_content'] === null) {
            $invalidProperties[] = "'media_content' can't be null";
        }
        if ($this->container['colors'] === null) {
            $invalidProperties[] = "'colors' can't be null";
        }
        if ($this->container['disabled'] === null) {
            $invalidProperties[] = "'disabled' can't be null";
        }
        if ($this->container['vendor_id'] === null) {
            $invalidProperties[] = "'vendor_id' can't be null";
        }
        if ($this->container['vendor_name'] === null) {
            $invalidProperties[] = "'vendor_name' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['date_modified'] === null) {
            $invalidProperties[] = "'date_modified' can't be null";
        }
        if ($this->container['shell'] === null) {
            $invalidProperties[] = "'shell' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['source_id'] === null) {
            $invalidProperties[] = "'source_id' can't be null";
        }
        if ($this->container['stores'] === null) {
            $invalidProperties[] = "'stores' can't be null";
        }
        if ($this->container['sizes'] === null) {
            $invalidProperties[] = "'sizes' can't be null";
        }
        if ($this->container['product_category_array'] === null) {
            $invalidProperties[] = "'product_category_array' can't be null";
        }
        if ($this->container['store_array'] === null) {
            $invalidProperties[] = "'store_array' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets inhouse_id
     *
     * @return string
     */
    public function getInhouseId()
    {
        return $this->container['inhouse_id'];
    }

    /**
     * Sets inhouse_id
     *
     * @param string $inhouse_id inhouse_id
     *
     * @return $this
     */
    public function setInhouseId($inhouse_id)
    {
        $this->container['inhouse_id'] = $inhouse_id;

        return $this;
    }

    /**
     * Gets media_content
     *
     * @return string[]
     */
    public function getMediaContent()
    {
        return $this->container['media_content'];
    }

    /**
     * Sets media_content
     *
     * @param string[] $media_content media_content
     *
     * @return $this
     */
    public function setMediaContent($media_content)
    {
        $this->container['media_content'] = $media_content;

        return $this;
    }

    /**
     * Gets colors
     *
     * @return string
     */
    public function getColors()
    {
        return $this->container['colors'];
    }

    /**
     * Sets colors
     *
     * @param string $colors colors
     *
     * @return $this
     */
    public function setColors($colors)
    {
        $this->container['colors'] = $colors;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return string
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param string $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return string
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param string $vendor_id vendor_id
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets vendor_name
     *
     * @return string
     */
    public function getVendorName()
    {
        return $this->container['vendor_name'];
    }

    /**
     * Sets vendor_name
     *
     * @param string $vendor_name vendor_name
     *
     * @return $this
     */
    public function setVendorName($vendor_name)
    {
        $this->container['vendor_name'] = $vendor_name;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return string
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param string $date_modified date_modified
     *
     * @return $this
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets shell
     *
     * @return string
     */
    public function getShell()
    {
        return $this->container['shell'];
    }

    /**
     * Sets shell
     *
     * @param string $shell shell
     *
     * @return $this
     */
    public function setShell($shell)
    {
        $this->container['shell'] = $shell;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets stores
     *
     * @return string
     */
    public function getStores()
    {
        return $this->container['stores'];
    }

    /**
     * Sets stores
     *
     * @param string $stores stores
     *
     * @return $this
     */
    public function setStores($stores)
    {
        $this->container['stores'] = $stores;

        return $this;
    }

    /**
     * Gets sizes
     *
     * @return string
     */
    public function getSizes()
    {
        return $this->container['sizes'];
    }

    /**
     * Sets sizes
     *
     * @param string $sizes sizes
     *
     * @return $this
     */
    public function setSizes($sizes)
    {
        $this->container['sizes'] = $sizes;

        return $this;
    }

    /**
     * Gets product_category_array
     *
     * @return \Swagger\Client\Model\ProductCategoryArray[]
     */
    public function getProductCategoryArray()
    {
        return $this->container['product_category_array'];
    }

    /**
     * Sets product_category_array
     *
     * @param \Swagger\Client\Model\ProductCategoryArray[] $product_category_array product_category_array
     *
     * @return $this
     */
    public function setProductCategoryArray($product_category_array)
    {
        $this->container['product_category_array'] = $product_category_array;

        return $this;
    }

    /**
     * Gets store_array
     *
     * @return string[]
     */
    public function getStoreArray()
    {
        return $this->container['store_array'];
    }

    /**
     * Sets store_array
     *
     * @param string[] $store_array store_array
     *
     * @return $this
     */
    public function setStoreArray($store_array)
    {
        $this->container['store_array'] = $store_array;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
