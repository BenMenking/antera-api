<?php
/**
 * Design2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Antera Api v1
 *
 * Antera API v1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Design2 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Design2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Design2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'description' => 'string',
'url' => 'string',
'is_master' => 'string',
'date_created' => 'string',
'date_modified' => 'string',
'deleted' => 'string',
'model' => 'string',
'design_type' => 'string',
'design_form_type' => 'string',
'customer_id' => 'string',
'customer_name' => 'string',
'deco_vendor_id' => 'string',
'deco_vendor_name' => 'string',
'deco_vendor_no' => 'string',
'color' => 'string',
'type_files' => 'string',
'location' => 'string',
'stitch_count' => 'string',
'deco_detail_count_name' => 'string',
'saved_to_disk' => 'string',
'variation' => '\Swagger\Client\Model\Variation2[]',
'size' => 'string',
'design_description_stitches' => 'string',
'color_thread' => 'string',
'notes' => 'string',
'order_numbers' => 'string',
'related_orders' => 'string[]',
'design_images' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'description' => null,
'url' => null,
'is_master' => null,
'date_created' => null,
'date_modified' => null,
'deleted' => null,
'model' => null,
'design_type' => null,
'design_form_type' => null,
'customer_id' => null,
'customer_name' => null,
'deco_vendor_id' => null,
'deco_vendor_name' => null,
'deco_vendor_no' => null,
'color' => null,
'type_files' => null,
'location' => null,
'stitch_count' => null,
'deco_detail_count_name' => null,
'saved_to_disk' => null,
'variation' => null,
'size' => null,
'design_description_stitches' => null,
'color_thread' => null,
'notes' => null,
'order_numbers' => null,
'related_orders' => null,
'design_images' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'description' => 'description',
'url' => 'url',
'is_master' => 'isMaster',
'date_created' => 'dateCreated',
'date_modified' => 'dateModified',
'deleted' => 'deleted',
'model' => 'model',
'design_type' => 'designType',
'design_form_type' => 'designFormType',
'customer_id' => 'customerId',
'customer_name' => 'customerName',
'deco_vendor_id' => 'decoVendorId',
'deco_vendor_name' => 'decoVendorName',
'deco_vendor_no' => 'decoVendorNo',
'color' => 'color',
'type_files' => 'typeFiles',
'location' => 'location',
'stitch_count' => 'stitchCount',
'deco_detail_count_name' => 'decoDetailCountName',
'saved_to_disk' => 'savedToDisk',
'variation' => 'variation',
'size' => 'size',
'design_description_stitches' => 'designDescriptionStitches',
'color_thread' => 'colorThread',
'notes' => 'notes',
'order_numbers' => 'orderNumbers',
'related_orders' => 'relatedOrders',
'design_images' => 'designImages'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'description' => 'setDescription',
'url' => 'setUrl',
'is_master' => 'setIsMaster',
'date_created' => 'setDateCreated',
'date_modified' => 'setDateModified',
'deleted' => 'setDeleted',
'model' => 'setModel',
'design_type' => 'setDesignType',
'design_form_type' => 'setDesignFormType',
'customer_id' => 'setCustomerId',
'customer_name' => 'setCustomerName',
'deco_vendor_id' => 'setDecoVendorId',
'deco_vendor_name' => 'setDecoVendorName',
'deco_vendor_no' => 'setDecoVendorNo',
'color' => 'setColor',
'type_files' => 'setTypeFiles',
'location' => 'setLocation',
'stitch_count' => 'setStitchCount',
'deco_detail_count_name' => 'setDecoDetailCountName',
'saved_to_disk' => 'setSavedToDisk',
'variation' => 'setVariation',
'size' => 'setSize',
'design_description_stitches' => 'setDesignDescriptionStitches',
'color_thread' => 'setColorThread',
'notes' => 'setNotes',
'order_numbers' => 'setOrderNumbers',
'related_orders' => 'setRelatedOrders',
'design_images' => 'setDesignImages'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'description' => 'getDescription',
'url' => 'getUrl',
'is_master' => 'getIsMaster',
'date_created' => 'getDateCreated',
'date_modified' => 'getDateModified',
'deleted' => 'getDeleted',
'model' => 'getModel',
'design_type' => 'getDesignType',
'design_form_type' => 'getDesignFormType',
'customer_id' => 'getCustomerId',
'customer_name' => 'getCustomerName',
'deco_vendor_id' => 'getDecoVendorId',
'deco_vendor_name' => 'getDecoVendorName',
'deco_vendor_no' => 'getDecoVendorNo',
'color' => 'getColor',
'type_files' => 'getTypeFiles',
'location' => 'getLocation',
'stitch_count' => 'getStitchCount',
'deco_detail_count_name' => 'getDecoDetailCountName',
'saved_to_disk' => 'getSavedToDisk',
'variation' => 'getVariation',
'size' => 'getSize',
'design_description_stitches' => 'getDesignDescriptionStitches',
'color_thread' => 'getColorThread',
'notes' => 'getNotes',
'order_numbers' => 'getOrderNumbers',
'related_orders' => 'getRelatedOrders',
'design_images' => 'getDesignImages'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['is_master'] = isset($data['is_master']) ? $data['is_master'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_modified'] = isset($data['date_modified']) ? $data['date_modified'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['design_type'] = isset($data['design_type']) ? $data['design_type'] : null;
        $this->container['design_form_type'] = isset($data['design_form_type']) ? $data['design_form_type'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['deco_vendor_id'] = isset($data['deco_vendor_id']) ? $data['deco_vendor_id'] : null;
        $this->container['deco_vendor_name'] = isset($data['deco_vendor_name']) ? $data['deco_vendor_name'] : null;
        $this->container['deco_vendor_no'] = isset($data['deco_vendor_no']) ? $data['deco_vendor_no'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['type_files'] = isset($data['type_files']) ? $data['type_files'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['stitch_count'] = isset($data['stitch_count']) ? $data['stitch_count'] : null;
        $this->container['deco_detail_count_name'] = isset($data['deco_detail_count_name']) ? $data['deco_detail_count_name'] : null;
        $this->container['saved_to_disk'] = isset($data['saved_to_disk']) ? $data['saved_to_disk'] : null;
        $this->container['variation'] = isset($data['variation']) ? $data['variation'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['design_description_stitches'] = isset($data['design_description_stitches']) ? $data['design_description_stitches'] : null;
        $this->container['color_thread'] = isset($data['color_thread']) ? $data['color_thread'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['order_numbers'] = isset($data['order_numbers']) ? $data['order_numbers'] : null;
        $this->container['related_orders'] = isset($data['related_orders']) ? $data['related_orders'] : null;
        $this->container['design_images'] = isset($data['design_images']) ? $data['design_images'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['is_master'] === null) {
            $invalidProperties[] = "'is_master' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['date_modified'] === null) {
            $invalidProperties[] = "'date_modified' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ($this->container['design_type'] === null) {
            $invalidProperties[] = "'design_type' can't be null";
        }
        if ($this->container['design_form_type'] === null) {
            $invalidProperties[] = "'design_form_type' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['customer_name'] === null) {
            $invalidProperties[] = "'customer_name' can't be null";
        }
        if ($this->container['deco_vendor_id'] === null) {
            $invalidProperties[] = "'deco_vendor_id' can't be null";
        }
        if ($this->container['deco_vendor_name'] === null) {
            $invalidProperties[] = "'deco_vendor_name' can't be null";
        }
        if ($this->container['deco_vendor_no'] === null) {
            $invalidProperties[] = "'deco_vendor_no' can't be null";
        }
        if ($this->container['color'] === null) {
            $invalidProperties[] = "'color' can't be null";
        }
        if ($this->container['type_files'] === null) {
            $invalidProperties[] = "'type_files' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['stitch_count'] === null) {
            $invalidProperties[] = "'stitch_count' can't be null";
        }
        if ($this->container['deco_detail_count_name'] === null) {
            $invalidProperties[] = "'deco_detail_count_name' can't be null";
        }
        if ($this->container['saved_to_disk'] === null) {
            $invalidProperties[] = "'saved_to_disk' can't be null";
        }
        if ($this->container['variation'] === null) {
            $invalidProperties[] = "'variation' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['design_description_stitches'] === null) {
            $invalidProperties[] = "'design_description_stitches' can't be null";
        }
        if ($this->container['color_thread'] === null) {
            $invalidProperties[] = "'color_thread' can't be null";
        }
        if ($this->container['notes'] === null) {
            $invalidProperties[] = "'notes' can't be null";
        }
        if ($this->container['order_numbers'] === null) {
            $invalidProperties[] = "'order_numbers' can't be null";
        }
        if ($this->container['related_orders'] === null) {
            $invalidProperties[] = "'related_orders' can't be null";
        }
        if ($this->container['design_images'] === null) {
            $invalidProperties[] = "'design_images' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets is_master
     *
     * @return string
     */
    public function getIsMaster()
    {
        return $this->container['is_master'];
    }

    /**
     * Sets is_master
     *
     * @param string $is_master is_master
     *
     * @return $this
     */
    public function setIsMaster($is_master)
    {
        $this->container['is_master'] = $is_master;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return string
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param string $date_modified date_modified
     *
     * @return $this
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return string
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param string $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets design_type
     *
     * @return string
     */
    public function getDesignType()
    {
        return $this->container['design_type'];
    }

    /**
     * Sets design_type
     *
     * @param string $design_type design_type
     *
     * @return $this
     */
    public function setDesignType($design_type)
    {
        $this->container['design_type'] = $design_type;

        return $this;
    }

    /**
     * Gets design_form_type
     *
     * @return string
     */
    public function getDesignFormType()
    {
        return $this->container['design_form_type'];
    }

    /**
     * Sets design_form_type
     *
     * @param string $design_form_type design_form_type
     *
     * @return $this
     */
    public function setDesignFormType($design_form_type)
    {
        $this->container['design_form_type'] = $design_form_type;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets deco_vendor_id
     *
     * @return string
     */
    public function getDecoVendorId()
    {
        return $this->container['deco_vendor_id'];
    }

    /**
     * Sets deco_vendor_id
     *
     * @param string $deco_vendor_id deco_vendor_id
     *
     * @return $this
     */
    public function setDecoVendorId($deco_vendor_id)
    {
        $this->container['deco_vendor_id'] = $deco_vendor_id;

        return $this;
    }

    /**
     * Gets deco_vendor_name
     *
     * @return string
     */
    public function getDecoVendorName()
    {
        return $this->container['deco_vendor_name'];
    }

    /**
     * Sets deco_vendor_name
     *
     * @param string $deco_vendor_name deco_vendor_name
     *
     * @return $this
     */
    public function setDecoVendorName($deco_vendor_name)
    {
        $this->container['deco_vendor_name'] = $deco_vendor_name;

        return $this;
    }

    /**
     * Gets deco_vendor_no
     *
     * @return string
     */
    public function getDecoVendorNo()
    {
        return $this->container['deco_vendor_no'];
    }

    /**
     * Sets deco_vendor_no
     *
     * @param string $deco_vendor_no deco_vendor_no
     *
     * @return $this
     */
    public function setDecoVendorNo($deco_vendor_no)
    {
        $this->container['deco_vendor_no'] = $deco_vendor_no;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets type_files
     *
     * @return string
     */
    public function getTypeFiles()
    {
        return $this->container['type_files'];
    }

    /**
     * Sets type_files
     *
     * @param string $type_files type_files
     *
     * @return $this
     */
    public function setTypeFiles($type_files)
    {
        $this->container['type_files'] = $type_files;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets stitch_count
     *
     * @return string
     */
    public function getStitchCount()
    {
        return $this->container['stitch_count'];
    }

    /**
     * Sets stitch_count
     *
     * @param string $stitch_count stitch_count
     *
     * @return $this
     */
    public function setStitchCount($stitch_count)
    {
        $this->container['stitch_count'] = $stitch_count;

        return $this;
    }

    /**
     * Gets deco_detail_count_name
     *
     * @return string
     */
    public function getDecoDetailCountName()
    {
        return $this->container['deco_detail_count_name'];
    }

    /**
     * Sets deco_detail_count_name
     *
     * @param string $deco_detail_count_name deco_detail_count_name
     *
     * @return $this
     */
    public function setDecoDetailCountName($deco_detail_count_name)
    {
        $this->container['deco_detail_count_name'] = $deco_detail_count_name;

        return $this;
    }

    /**
     * Gets saved_to_disk
     *
     * @return string
     */
    public function getSavedToDisk()
    {
        return $this->container['saved_to_disk'];
    }

    /**
     * Sets saved_to_disk
     *
     * @param string $saved_to_disk saved_to_disk
     *
     * @return $this
     */
    public function setSavedToDisk($saved_to_disk)
    {
        $this->container['saved_to_disk'] = $saved_to_disk;

        return $this;
    }

    /**
     * Gets variation
     *
     * @return \Swagger\Client\Model\Variation2[]
     */
    public function getVariation()
    {
        return $this->container['variation'];
    }

    /**
     * Sets variation
     *
     * @param \Swagger\Client\Model\Variation2[] $variation variation
     *
     * @return $this
     */
    public function setVariation($variation)
    {
        $this->container['variation'] = $variation;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets design_description_stitches
     *
     * @return string
     */
    public function getDesignDescriptionStitches()
    {
        return $this->container['design_description_stitches'];
    }

    /**
     * Sets design_description_stitches
     *
     * @param string $design_description_stitches design_description_stitches
     *
     * @return $this
     */
    public function setDesignDescriptionStitches($design_description_stitches)
    {
        $this->container['design_description_stitches'] = $design_description_stitches;

        return $this;
    }

    /**
     * Gets color_thread
     *
     * @return string
     */
    public function getColorThread()
    {
        return $this->container['color_thread'];
    }

    /**
     * Sets color_thread
     *
     * @param string $color_thread color_thread
     *
     * @return $this
     */
    public function setColorThread($color_thread)
    {
        $this->container['color_thread'] = $color_thread;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets order_numbers
     *
     * @return string
     */
    public function getOrderNumbers()
    {
        return $this->container['order_numbers'];
    }

    /**
     * Sets order_numbers
     *
     * @param string $order_numbers order_numbers
     *
     * @return $this
     */
    public function setOrderNumbers($order_numbers)
    {
        $this->container['order_numbers'] = $order_numbers;

        return $this;
    }

    /**
     * Gets related_orders
     *
     * @return string[]
     */
    public function getRelatedOrders()
    {
        return $this->container['related_orders'];
    }

    /**
     * Sets related_orders
     *
     * @param string[] $related_orders related_orders
     *
     * @return $this
     */
    public function setRelatedOrders($related_orders)
    {
        $this->container['related_orders'] = $related_orders;

        return $this;
    }

    /**
     * Gets design_images
     *
     * @return string[]
     */
    public function getDesignImages()
    {
        return $this->container['design_images'];
    }

    /**
     * Sets design_images
     *
     * @param string[] $design_images design_images
     *
     * @return $this
     */
    public function setDesignImages($design_images)
    {
        $this->container['design_images'] = $design_images;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
