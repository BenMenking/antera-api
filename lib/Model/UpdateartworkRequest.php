<?php
/**
 * UpdateartworkRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Antera Api v1
 *
 * Antera API v1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateartworkRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateartworkRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateartworkRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'design_no' => 'string',
'design_type_id' => 'string',
'order_id' => 'string',
'assigned_id' => 'string',
'customer_id' => 'string',
'account_id' => 'string',
'estimated' => 'string',
'due_date' => 'string',
'created_date' => 'string',
'priority' => 'string',
'status_id' => 'string',
'identity' => 'string',
'category' => 'string',
'color' => 'string',
'image' => 'string',
'notes' => 'string',
'feature_image' => 'string',
'design_id' => 'string',
'assignee' => 'string',
'order_num' => 'string',
'order_identity' => 'string',
'customer_name' => 'string',
'design_type_name' => 'string',
'status_name' => 'string',
'status_label' => 'string',
'design' => '\Swagger\Client\Model\Design2',
'thumbnail' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'design_no' => null,
'design_type_id' => null,
'order_id' => null,
'assigned_id' => null,
'customer_id' => null,
'account_id' => null,
'estimated' => null,
'due_date' => null,
'created_date' => null,
'priority' => null,
'status_id' => null,
'identity' => null,
'category' => null,
'color' => null,
'image' => null,
'notes' => null,
'feature_image' => null,
'design_id' => null,
'assignee' => null,
'order_num' => null,
'order_identity' => null,
'customer_name' => null,
'design_type_name' => null,
'status_name' => null,
'status_label' => null,
'design' => null,
'thumbnail' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'design_no' => 'designNo',
'design_type_id' => 'designTypeId',
'order_id' => 'orderId',
'assigned_id' => 'assignedId',
'customer_id' => 'customerId',
'account_id' => 'accountId',
'estimated' => 'estimated',
'due_date' => 'dueDate',
'created_date' => 'createdDate',
'priority' => 'priority',
'status_id' => 'statusId',
'identity' => 'identity',
'category' => 'category',
'color' => 'color',
'image' => 'image',
'notes' => 'notes',
'feature_image' => 'featureImage',
'design_id' => 'designId',
'assignee' => 'assignee',
'order_num' => 'orderNum',
'order_identity' => 'orderIdentity',
'customer_name' => 'customerName',
'design_type_name' => 'designTypeName',
'status_name' => 'statusName',
'status_label' => 'statusLabel',
'design' => 'design',
'thumbnail' => 'thumbnail'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'design_no' => 'setDesignNo',
'design_type_id' => 'setDesignTypeId',
'order_id' => 'setOrderId',
'assigned_id' => 'setAssignedId',
'customer_id' => 'setCustomerId',
'account_id' => 'setAccountId',
'estimated' => 'setEstimated',
'due_date' => 'setDueDate',
'created_date' => 'setCreatedDate',
'priority' => 'setPriority',
'status_id' => 'setStatusId',
'identity' => 'setIdentity',
'category' => 'setCategory',
'color' => 'setColor',
'image' => 'setImage',
'notes' => 'setNotes',
'feature_image' => 'setFeatureImage',
'design_id' => 'setDesignId',
'assignee' => 'setAssignee',
'order_num' => 'setOrderNum',
'order_identity' => 'setOrderIdentity',
'customer_name' => 'setCustomerName',
'design_type_name' => 'setDesignTypeName',
'status_name' => 'setStatusName',
'status_label' => 'setStatusLabel',
'design' => 'setDesign',
'thumbnail' => 'setThumbnail'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'design_no' => 'getDesignNo',
'design_type_id' => 'getDesignTypeId',
'order_id' => 'getOrderId',
'assigned_id' => 'getAssignedId',
'customer_id' => 'getCustomerId',
'account_id' => 'getAccountId',
'estimated' => 'getEstimated',
'due_date' => 'getDueDate',
'created_date' => 'getCreatedDate',
'priority' => 'getPriority',
'status_id' => 'getStatusId',
'identity' => 'getIdentity',
'category' => 'getCategory',
'color' => 'getColor',
'image' => 'getImage',
'notes' => 'getNotes',
'feature_image' => 'getFeatureImage',
'design_id' => 'getDesignId',
'assignee' => 'getAssignee',
'order_num' => 'getOrderNum',
'order_identity' => 'getOrderIdentity',
'customer_name' => 'getCustomerName',
'design_type_name' => 'getDesignTypeName',
'status_name' => 'getStatusName',
'status_label' => 'getStatusLabel',
'design' => 'getDesign',
'thumbnail' => 'getThumbnail'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['design_no'] = isset($data['design_no']) ? $data['design_no'] : null;
        $this->container['design_type_id'] = isset($data['design_type_id']) ? $data['design_type_id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['assigned_id'] = isset($data['assigned_id']) ? $data['assigned_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['estimated'] = isset($data['estimated']) ? $data['estimated'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['identity'] = isset($data['identity']) ? $data['identity'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['feature_image'] = isset($data['feature_image']) ? $data['feature_image'] : null;
        $this->container['design_id'] = isset($data['design_id']) ? $data['design_id'] : null;
        $this->container['assignee'] = isset($data['assignee']) ? $data['assignee'] : null;
        $this->container['order_num'] = isset($data['order_num']) ? $data['order_num'] : null;
        $this->container['order_identity'] = isset($data['order_identity']) ? $data['order_identity'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['design_type_name'] = isset($data['design_type_name']) ? $data['design_type_name'] : null;
        $this->container['status_name'] = isset($data['status_name']) ? $data['status_name'] : null;
        $this->container['status_label'] = isset($data['status_label']) ? $data['status_label'] : null;
        $this->container['design'] = isset($data['design']) ? $data['design'] : null;
        $this->container['thumbnail'] = isset($data['thumbnail']) ? $data['thumbnail'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['design_no'] === null) {
            $invalidProperties[] = "'design_no' can't be null";
        }
        if ($this->container['design_type_id'] === null) {
            $invalidProperties[] = "'design_type_id' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['assigned_id'] === null) {
            $invalidProperties[] = "'assigned_id' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['estimated'] === null) {
            $invalidProperties[] = "'estimated' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalidProperties[] = "'due_date' can't be null";
        }
        if ($this->container['created_date'] === null) {
            $invalidProperties[] = "'created_date' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['status_id'] === null) {
            $invalidProperties[] = "'status_id' can't be null";
        }
        if ($this->container['identity'] === null) {
            $invalidProperties[] = "'identity' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['color'] === null) {
            $invalidProperties[] = "'color' can't be null";
        }
        if ($this->container['image'] === null) {
            $invalidProperties[] = "'image' can't be null";
        }
        if ($this->container['notes'] === null) {
            $invalidProperties[] = "'notes' can't be null";
        }
        if ($this->container['feature_image'] === null) {
            $invalidProperties[] = "'feature_image' can't be null";
        }
        if ($this->container['design_id'] === null) {
            $invalidProperties[] = "'design_id' can't be null";
        }
        if ($this->container['assignee'] === null) {
            $invalidProperties[] = "'assignee' can't be null";
        }
        if ($this->container['order_num'] === null) {
            $invalidProperties[] = "'order_num' can't be null";
        }
        if ($this->container['order_identity'] === null) {
            $invalidProperties[] = "'order_identity' can't be null";
        }
        if ($this->container['customer_name'] === null) {
            $invalidProperties[] = "'customer_name' can't be null";
        }
        if ($this->container['design_type_name'] === null) {
            $invalidProperties[] = "'design_type_name' can't be null";
        }
        if ($this->container['status_name'] === null) {
            $invalidProperties[] = "'status_name' can't be null";
        }
        if ($this->container['status_label'] === null) {
            $invalidProperties[] = "'status_label' can't be null";
        }
        if ($this->container['design'] === null) {
            $invalidProperties[] = "'design' can't be null";
        }
        if ($this->container['thumbnail'] === null) {
            $invalidProperties[] = "'thumbnail' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets design_no
     *
     * @return string
     */
    public function getDesignNo()
    {
        return $this->container['design_no'];
    }

    /**
     * Sets design_no
     *
     * @param string $design_no design_no
     *
     * @return $this
     */
    public function setDesignNo($design_no)
    {
        $this->container['design_no'] = $design_no;

        return $this;
    }

    /**
     * Gets design_type_id
     *
     * @return string
     */
    public function getDesignTypeId()
    {
        return $this->container['design_type_id'];
    }

    /**
     * Sets design_type_id
     *
     * @param string $design_type_id design_type_id
     *
     * @return $this
     */
    public function setDesignTypeId($design_type_id)
    {
        $this->container['design_type_id'] = $design_type_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets assigned_id
     *
     * @return string
     */
    public function getAssignedId()
    {
        return $this->container['assigned_id'];
    }

    /**
     * Sets assigned_id
     *
     * @param string $assigned_id assigned_id
     *
     * @return $this
     */
    public function setAssignedId($assigned_id)
    {
        $this->container['assigned_id'] = $assigned_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets estimated
     *
     * @return string
     */
    public function getEstimated()
    {
        return $this->container['estimated'];
    }

    /**
     * Sets estimated
     *
     * @param string $estimated estimated
     *
     * @return $this
     */
    public function setEstimated($estimated)
    {
        $this->container['estimated'] = $estimated;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return string
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param string $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return string
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param string $status_id status_id
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets identity
     *
     * @return string
     */
    public function getIdentity()
    {
        return $this->container['identity'];
    }

    /**
     * Sets identity
     *
     * @param string $identity identity
     *
     * @return $this
     */
    public function setIdentity($identity)
    {
        $this->container['identity'] = $identity;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets feature_image
     *
     * @return string
     */
    public function getFeatureImage()
    {
        return $this->container['feature_image'];
    }

    /**
     * Sets feature_image
     *
     * @param string $feature_image feature_image
     *
     * @return $this
     */
    public function setFeatureImage($feature_image)
    {
        $this->container['feature_image'] = $feature_image;

        return $this;
    }

    /**
     * Gets design_id
     *
     * @return string
     */
    public function getDesignId()
    {
        return $this->container['design_id'];
    }

    /**
     * Sets design_id
     *
     * @param string $design_id design_id
     *
     * @return $this
     */
    public function setDesignId($design_id)
    {
        $this->container['design_id'] = $design_id;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return string
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param string $assignee assignee
     *
     * @return $this
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets order_num
     *
     * @return string
     */
    public function getOrderNum()
    {
        return $this->container['order_num'];
    }

    /**
     * Sets order_num
     *
     * @param string $order_num order_num
     *
     * @return $this
     */
    public function setOrderNum($order_num)
    {
        $this->container['order_num'] = $order_num;

        return $this;
    }

    /**
     * Gets order_identity
     *
     * @return string
     */
    public function getOrderIdentity()
    {
        return $this->container['order_identity'];
    }

    /**
     * Sets order_identity
     *
     * @param string $order_identity order_identity
     *
     * @return $this
     */
    public function setOrderIdentity($order_identity)
    {
        $this->container['order_identity'] = $order_identity;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets design_type_name
     *
     * @return string
     */
    public function getDesignTypeName()
    {
        return $this->container['design_type_name'];
    }

    /**
     * Sets design_type_name
     *
     * @param string $design_type_name design_type_name
     *
     * @return $this
     */
    public function setDesignTypeName($design_type_name)
    {
        $this->container['design_type_name'] = $design_type_name;

        return $this;
    }

    /**
     * Gets status_name
     *
     * @return string
     */
    public function getStatusName()
    {
        return $this->container['status_name'];
    }

    /**
     * Sets status_name
     *
     * @param string $status_name status_name
     *
     * @return $this
     */
    public function setStatusName($status_name)
    {
        $this->container['status_name'] = $status_name;

        return $this;
    }

    /**
     * Gets status_label
     *
     * @return string
     */
    public function getStatusLabel()
    {
        return $this->container['status_label'];
    }

    /**
     * Sets status_label
     *
     * @param string $status_label status_label
     *
     * @return $this
     */
    public function setStatusLabel($status_label)
    {
        $this->container['status_label'] = $status_label;

        return $this;
    }

    /**
     * Gets design
     *
     * @return \Swagger\Client\Model\Design2
     */
    public function getDesign()
    {
        return $this->container['design'];
    }

    /**
     * Sets design
     *
     * @param \Swagger\Client\Model\Design2 $design design
     *
     * @return $this
     */
    public function setDesign($design)
    {
        $this->container['design'] = $design;

        return $this;
    }

    /**
     * Gets thumbnail
     *
     * @return string
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     *
     * @param string $thumbnail thumbnail
     *
     * @return $this
     */
    public function setThumbnail($thumbnail)
    {
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
