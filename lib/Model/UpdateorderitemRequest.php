<?php
/**
 * UpdateorderitemRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Antera Api v1
 *
 * Antera API v1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateorderitemRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateorderitemRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateorderitemRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product' => '\Swagger\Client\Model\Product',
'vendor' => '\Swagger\Client\Model\Vendor',
'quantity' => 'string',
'price' => 'string',
'total_price' => 'string',
'cost' => 'string',
'total_cost' => 'string',
'profit' => 'string',
'tax' => 'string',
'customer_description' => 'string',
'vendor_description' => 'string',
'ship_to' => '\Swagger\Client\Model\ShipTo',
'ship_info' => '\Swagger\Client\Model\ShipInfo2',
'inhand_date' => 'string',
'type' => 'string',
'hide' => 'string',
'drop_down' => 'string',
'account_code' => 'string',
'gl_account' => '\Swagger\Client\Model\GlAccount',
'item_type' => 'string',
'po_type' => 'string',
'margin' => 'string',
'taxable' => 'string',
'inhouse_id' => 'string',
'net_price' => 'string',
'discount' => '\Swagger\Client\Model\Discount',
'receiving' => '\Swagger\Client\Model\Receiving',
'warehouse' => 'string',
'kit' => '\Swagger\Client\Model\Kit',
'roll_up' => '\Swagger\Client\Model\RollUp',
'modified_price_breaks' => 'string[]',
'unique_id' => 'string',
'deco_margin' => 'string',
'vouching_status' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product' => null,
'vendor' => null,
'quantity' => null,
'price' => null,
'total_price' => null,
'cost' => null,
'total_cost' => null,
'profit' => null,
'tax' => null,
'customer_description' => null,
'vendor_description' => null,
'ship_to' => null,
'ship_info' => null,
'inhand_date' => null,
'type' => null,
'hide' => null,
'drop_down' => null,
'account_code' => null,
'gl_account' => null,
'item_type' => null,
'po_type' => null,
'margin' => null,
'taxable' => null,
'inhouse_id' => null,
'net_price' => null,
'discount' => null,
'receiving' => null,
'warehouse' => null,
'kit' => null,
'roll_up' => null,
'modified_price_breaks' => null,
'unique_id' => null,
'deco_margin' => null,
'vouching_status' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product' => 'product',
'vendor' => 'vendor',
'quantity' => 'quantity',
'price' => 'price',
'total_price' => 'totalPrice',
'cost' => 'cost',
'total_cost' => 'totalCost',
'profit' => 'profit',
'tax' => 'tax',
'customer_description' => 'customerDescription',
'vendor_description' => 'vendorDescription',
'ship_to' => 'shipTo',
'ship_info' => 'shipInfo',
'inhand_date' => 'inhandDate',
'type' => 'type',
'hide' => 'hide',
'drop_down' => 'dropDown',
'account_code' => 'accountCode',
'gl_account' => 'glAccount',
'item_type' => 'itemType',
'po_type' => 'poType',
'margin' => 'margin',
'taxable' => 'taxable',
'inhouse_id' => 'inhouseId',
'net_price' => 'netPrice',
'discount' => 'discount',
'receiving' => 'receiving',
'warehouse' => 'warehouse',
'kit' => 'kit',
'roll_up' => 'rollUp',
'modified_price_breaks' => 'modifiedPriceBreaks',
'unique_id' => 'uniqueId',
'deco_margin' => 'decoMargin',
'vouching_status' => 'vouchingStatus'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product' => 'setProduct',
'vendor' => 'setVendor',
'quantity' => 'setQuantity',
'price' => 'setPrice',
'total_price' => 'setTotalPrice',
'cost' => 'setCost',
'total_cost' => 'setTotalCost',
'profit' => 'setProfit',
'tax' => 'setTax',
'customer_description' => 'setCustomerDescription',
'vendor_description' => 'setVendorDescription',
'ship_to' => 'setShipTo',
'ship_info' => 'setShipInfo',
'inhand_date' => 'setInhandDate',
'type' => 'setType',
'hide' => 'setHide',
'drop_down' => 'setDropDown',
'account_code' => 'setAccountCode',
'gl_account' => 'setGlAccount',
'item_type' => 'setItemType',
'po_type' => 'setPoType',
'margin' => 'setMargin',
'taxable' => 'setTaxable',
'inhouse_id' => 'setInhouseId',
'net_price' => 'setNetPrice',
'discount' => 'setDiscount',
'receiving' => 'setReceiving',
'warehouse' => 'setWarehouse',
'kit' => 'setKit',
'roll_up' => 'setRollUp',
'modified_price_breaks' => 'setModifiedPriceBreaks',
'unique_id' => 'setUniqueId',
'deco_margin' => 'setDecoMargin',
'vouching_status' => 'setVouchingStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product' => 'getProduct',
'vendor' => 'getVendor',
'quantity' => 'getQuantity',
'price' => 'getPrice',
'total_price' => 'getTotalPrice',
'cost' => 'getCost',
'total_cost' => 'getTotalCost',
'profit' => 'getProfit',
'tax' => 'getTax',
'customer_description' => 'getCustomerDescription',
'vendor_description' => 'getVendorDescription',
'ship_to' => 'getShipTo',
'ship_info' => 'getShipInfo',
'inhand_date' => 'getInhandDate',
'type' => 'getType',
'hide' => 'getHide',
'drop_down' => 'getDropDown',
'account_code' => 'getAccountCode',
'gl_account' => 'getGlAccount',
'item_type' => 'getItemType',
'po_type' => 'getPoType',
'margin' => 'getMargin',
'taxable' => 'getTaxable',
'inhouse_id' => 'getInhouseId',
'net_price' => 'getNetPrice',
'discount' => 'getDiscount',
'receiving' => 'getReceiving',
'warehouse' => 'getWarehouse',
'kit' => 'getKit',
'roll_up' => 'getRollUp',
'modified_price_breaks' => 'getModifiedPriceBreaks',
'unique_id' => 'getUniqueId',
'deco_margin' => 'getDecoMargin',
'vouching_status' => 'getVouchingStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['total_cost'] = isset($data['total_cost']) ? $data['total_cost'] : null;
        $this->container['profit'] = isset($data['profit']) ? $data['profit'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['customer_description'] = isset($data['customer_description']) ? $data['customer_description'] : null;
        $this->container['vendor_description'] = isset($data['vendor_description']) ? $data['vendor_description'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['ship_info'] = isset($data['ship_info']) ? $data['ship_info'] : null;
        $this->container['inhand_date'] = isset($data['inhand_date']) ? $data['inhand_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['hide'] = isset($data['hide']) ? $data['hide'] : null;
        $this->container['drop_down'] = isset($data['drop_down']) ? $data['drop_down'] : null;
        $this->container['account_code'] = isset($data['account_code']) ? $data['account_code'] : null;
        $this->container['gl_account'] = isset($data['gl_account']) ? $data['gl_account'] : null;
        $this->container['item_type'] = isset($data['item_type']) ? $data['item_type'] : null;
        $this->container['po_type'] = isset($data['po_type']) ? $data['po_type'] : null;
        $this->container['margin'] = isset($data['margin']) ? $data['margin'] : null;
        $this->container['taxable'] = isset($data['taxable']) ? $data['taxable'] : null;
        $this->container['inhouse_id'] = isset($data['inhouse_id']) ? $data['inhouse_id'] : null;
        $this->container['net_price'] = isset($data['net_price']) ? $data['net_price'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['receiving'] = isset($data['receiving']) ? $data['receiving'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['kit'] = isset($data['kit']) ? $data['kit'] : null;
        $this->container['roll_up'] = isset($data['roll_up']) ? $data['roll_up'] : null;
        $this->container['modified_price_breaks'] = isset($data['modified_price_breaks']) ? $data['modified_price_breaks'] : null;
        $this->container['unique_id'] = isset($data['unique_id']) ? $data['unique_id'] : null;
        $this->container['deco_margin'] = isset($data['deco_margin']) ? $data['deco_margin'] : null;
        $this->container['vouching_status'] = isset($data['vouching_status']) ? $data['vouching_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if ($this->container['vendor'] === null) {
            $invalidProperties[] = "'vendor' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ($this->container['cost'] === null) {
            $invalidProperties[] = "'cost' can't be null";
        }
        if ($this->container['total_cost'] === null) {
            $invalidProperties[] = "'total_cost' can't be null";
        }
        if ($this->container['profit'] === null) {
            $invalidProperties[] = "'profit' can't be null";
        }
        if ($this->container['tax'] === null) {
            $invalidProperties[] = "'tax' can't be null";
        }
        if ($this->container['customer_description'] === null) {
            $invalidProperties[] = "'customer_description' can't be null";
        }
        if ($this->container['vendor_description'] === null) {
            $invalidProperties[] = "'vendor_description' can't be null";
        }
        if ($this->container['ship_to'] === null) {
            $invalidProperties[] = "'ship_to' can't be null";
        }
        if ($this->container['ship_info'] === null) {
            $invalidProperties[] = "'ship_info' can't be null";
        }
        if ($this->container['inhand_date'] === null) {
            $invalidProperties[] = "'inhand_date' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['hide'] === null) {
            $invalidProperties[] = "'hide' can't be null";
        }
        if ($this->container['drop_down'] === null) {
            $invalidProperties[] = "'drop_down' can't be null";
        }
        if ($this->container['account_code'] === null) {
            $invalidProperties[] = "'account_code' can't be null";
        }
        if ($this->container['gl_account'] === null) {
            $invalidProperties[] = "'gl_account' can't be null";
        }
        if ($this->container['item_type'] === null) {
            $invalidProperties[] = "'item_type' can't be null";
        }
        if ($this->container['po_type'] === null) {
            $invalidProperties[] = "'po_type' can't be null";
        }
        if ($this->container['margin'] === null) {
            $invalidProperties[] = "'margin' can't be null";
        }
        if ($this->container['taxable'] === null) {
            $invalidProperties[] = "'taxable' can't be null";
        }
        if ($this->container['inhouse_id'] === null) {
            $invalidProperties[] = "'inhouse_id' can't be null";
        }
        if ($this->container['net_price'] === null) {
            $invalidProperties[] = "'net_price' can't be null";
        }
        if ($this->container['discount'] === null) {
            $invalidProperties[] = "'discount' can't be null";
        }
        if ($this->container['receiving'] === null) {
            $invalidProperties[] = "'receiving' can't be null";
        }
        if ($this->container['warehouse'] === null) {
            $invalidProperties[] = "'warehouse' can't be null";
        }
        if ($this->container['kit'] === null) {
            $invalidProperties[] = "'kit' can't be null";
        }
        if ($this->container['roll_up'] === null) {
            $invalidProperties[] = "'roll_up' can't be null";
        }
        if ($this->container['modified_price_breaks'] === null) {
            $invalidProperties[] = "'modified_price_breaks' can't be null";
        }
        if ($this->container['unique_id'] === null) {
            $invalidProperties[] = "'unique_id' can't be null";
        }
        if ($this->container['deco_margin'] === null) {
            $invalidProperties[] = "'deco_margin' can't be null";
        }
        if ($this->container['vouching_status'] === null) {
            $invalidProperties[] = "'vouching_status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product
     *
     * @return \Swagger\Client\Model\Product
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \Swagger\Client\Model\Product $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return \Swagger\Client\Model\Vendor
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param \Swagger\Client\Model\Vendor $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return string
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param string $total_price total_price
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return string
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param string $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return string
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param string $total_cost total_cost
     *
     * @return $this
     */
    public function setTotalCost($total_cost)
    {
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets profit
     *
     * @return string
     */
    public function getProfit()
    {
        return $this->container['profit'];
    }

    /**
     * Sets profit
     *
     * @param string $profit profit
     *
     * @return $this
     */
    public function setProfit($profit)
    {
        $this->container['profit'] = $profit;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets customer_description
     *
     * @return string
     */
    public function getCustomerDescription()
    {
        return $this->container['customer_description'];
    }

    /**
     * Sets customer_description
     *
     * @param string $customer_description customer_description
     *
     * @return $this
     */
    public function setCustomerDescription($customer_description)
    {
        $this->container['customer_description'] = $customer_description;

        return $this;
    }

    /**
     * Gets vendor_description
     *
     * @return string
     */
    public function getVendorDescription()
    {
        return $this->container['vendor_description'];
    }

    /**
     * Sets vendor_description
     *
     * @param string $vendor_description vendor_description
     *
     * @return $this
     */
    public function setVendorDescription($vendor_description)
    {
        $this->container['vendor_description'] = $vendor_description;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \Swagger\Client\Model\ShipTo
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \Swagger\Client\Model\ShipTo $ship_to ship_to
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets ship_info
     *
     * @return \Swagger\Client\Model\ShipInfo2
     */
    public function getShipInfo()
    {
        return $this->container['ship_info'];
    }

    /**
     * Sets ship_info
     *
     * @param \Swagger\Client\Model\ShipInfo2 $ship_info ship_info
     *
     * @return $this
     */
    public function setShipInfo($ship_info)
    {
        $this->container['ship_info'] = $ship_info;

        return $this;
    }

    /**
     * Gets inhand_date
     *
     * @return string
     */
    public function getInhandDate()
    {
        return $this->container['inhand_date'];
    }

    /**
     * Sets inhand_date
     *
     * @param string $inhand_date inhand_date
     *
     * @return $this
     */
    public function setInhandDate($inhand_date)
    {
        $this->container['inhand_date'] = $inhand_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets hide
     *
     * @return string
     */
    public function getHide()
    {
        return $this->container['hide'];
    }

    /**
     * Sets hide
     *
     * @param string $hide hide
     *
     * @return $this
     */
    public function setHide($hide)
    {
        $this->container['hide'] = $hide;

        return $this;
    }

    /**
     * Gets drop_down
     *
     * @return string
     */
    public function getDropDown()
    {
        return $this->container['drop_down'];
    }

    /**
     * Sets drop_down
     *
     * @param string $drop_down drop_down
     *
     * @return $this
     */
    public function setDropDown($drop_down)
    {
        $this->container['drop_down'] = $drop_down;

        return $this;
    }

    /**
     * Gets account_code
     *
     * @return string
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param string $account_code account_code
     *
     * @return $this
     */
    public function setAccountCode($account_code)
    {
        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets gl_account
     *
     * @return \Swagger\Client\Model\GlAccount
     */
    public function getGlAccount()
    {
        return $this->container['gl_account'];
    }

    /**
     * Sets gl_account
     *
     * @param \Swagger\Client\Model\GlAccount $gl_account gl_account
     *
     * @return $this
     */
    public function setGlAccount($gl_account)
    {
        $this->container['gl_account'] = $gl_account;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string $item_type item_type
     *
     * @return $this
     */
    public function setItemType($item_type)
    {
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets po_type
     *
     * @return string
     */
    public function getPoType()
    {
        return $this->container['po_type'];
    }

    /**
     * Sets po_type
     *
     * @param string $po_type po_type
     *
     * @return $this
     */
    public function setPoType($po_type)
    {
        $this->container['po_type'] = $po_type;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return string
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param string $margin margin
     *
     * @return $this
     */
    public function setMargin($margin)
    {
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return string
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param string $taxable taxable
     *
     * @return $this
     */
    public function setTaxable($taxable)
    {
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets inhouse_id
     *
     * @return string
     */
    public function getInhouseId()
    {
        return $this->container['inhouse_id'];
    }

    /**
     * Sets inhouse_id
     *
     * @param string $inhouse_id inhouse_id
     *
     * @return $this
     */
    public function setInhouseId($inhouse_id)
    {
        $this->container['inhouse_id'] = $inhouse_id;

        return $this;
    }

    /**
     * Gets net_price
     *
     * @return string
     */
    public function getNetPrice()
    {
        return $this->container['net_price'];
    }

    /**
     * Sets net_price
     *
     * @param string $net_price net_price
     *
     * @return $this
     */
    public function setNetPrice($net_price)
    {
        $this->container['net_price'] = $net_price;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \Swagger\Client\Model\Discount
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \Swagger\Client\Model\Discount $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets receiving
     *
     * @return \Swagger\Client\Model\Receiving
     */
    public function getReceiving()
    {
        return $this->container['receiving'];
    }

    /**
     * Sets receiving
     *
     * @param \Swagger\Client\Model\Receiving $receiving receiving
     *
     * @return $this
     */
    public function setReceiving($receiving)
    {
        $this->container['receiving'] = $receiving;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return string
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param string $warehouse warehouse
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets kit
     *
     * @return \Swagger\Client\Model\Kit
     */
    public function getKit()
    {
        return $this->container['kit'];
    }

    /**
     * Sets kit
     *
     * @param \Swagger\Client\Model\Kit $kit kit
     *
     * @return $this
     */
    public function setKit($kit)
    {
        $this->container['kit'] = $kit;

        return $this;
    }

    /**
     * Gets roll_up
     *
     * @return \Swagger\Client\Model\RollUp
     */
    public function getRollUp()
    {
        return $this->container['roll_up'];
    }

    /**
     * Sets roll_up
     *
     * @param \Swagger\Client\Model\RollUp $roll_up roll_up
     *
     * @return $this
     */
    public function setRollUp($roll_up)
    {
        $this->container['roll_up'] = $roll_up;

        return $this;
    }

    /**
     * Gets modified_price_breaks
     *
     * @return string[]
     */
    public function getModifiedPriceBreaks()
    {
        return $this->container['modified_price_breaks'];
    }

    /**
     * Sets modified_price_breaks
     *
     * @param string[] $modified_price_breaks modified_price_breaks
     *
     * @return $this
     */
    public function setModifiedPriceBreaks($modified_price_breaks)
    {
        $this->container['modified_price_breaks'] = $modified_price_breaks;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return string
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string $unique_id unique_id
     *
     * @return $this
     */
    public function setUniqueId($unique_id)
    {
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets deco_margin
     *
     * @return string
     */
    public function getDecoMargin()
    {
        return $this->container['deco_margin'];
    }

    /**
     * Sets deco_margin
     *
     * @param string $deco_margin deco_margin
     *
     * @return $this
     */
    public function setDecoMargin($deco_margin)
    {
        $this->container['deco_margin'] = $deco_margin;

        return $this;
    }

    /**
     * Gets vouching_status
     *
     * @return string
     */
    public function getVouchingStatus()
    {
        return $this->container['vouching_status'];
    }

    /**
     * Sets vouching_status
     *
     * @param string $vouching_status vouching_status
     *
     * @return $this
     */
    public function setVouchingStatus($vouching_status)
    {
        $this->container['vouching_status'] = $vouching_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
