<?php
/**
 * UpdateorderitemdecorationRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Antera Api v1
 *
 * Antera API v1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateorderitemdecorationRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateorderitemdecorationRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateorderitemdecorationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vendor' => '\Swagger\Client\Model\Vendor',
'type' => 'string',
'design' => '\Swagger\Client\Model\Design',
'status' => 'string',
'images' => '\Swagger\Client\Model\Images1',
'customer_description' => 'string',
'vendor_description' => 'string',
'notes' => 'string',
'location' => 'string',
'quantity' => 'string',
'price' => 'string',
'total_price' => 'string',
'cost' => 'string',
'total_cost' => 'string',
'profit' => 'string',
'po_type' => 'string',
'product' => '\Swagger\Client\Model\Product4',
'tax' => 'string',
'disable_tax' => 'string',
'vouching_status' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vendor' => null,
'type' => null,
'design' => null,
'status' => null,
'images' => null,
'customer_description' => null,
'vendor_description' => null,
'notes' => null,
'location' => null,
'quantity' => null,
'price' => null,
'total_price' => null,
'cost' => null,
'total_cost' => null,
'profit' => null,
'po_type' => null,
'product' => null,
'tax' => null,
'disable_tax' => null,
'vouching_status' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vendor' => 'vendor',
'type' => 'type',
'design' => 'design',
'status' => 'status',
'images' => 'images',
'customer_description' => 'customerDescription',
'vendor_description' => 'vendorDescription',
'notes' => 'notes',
'location' => 'location',
'quantity' => 'quantity',
'price' => 'price',
'total_price' => 'totalPrice',
'cost' => 'cost',
'total_cost' => 'totalCost',
'profit' => 'profit',
'po_type' => 'poType',
'product' => 'product',
'tax' => 'tax',
'disable_tax' => 'disableTax',
'vouching_status' => 'vouchingStatus'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vendor' => 'setVendor',
'type' => 'setType',
'design' => 'setDesign',
'status' => 'setStatus',
'images' => 'setImages',
'customer_description' => 'setCustomerDescription',
'vendor_description' => 'setVendorDescription',
'notes' => 'setNotes',
'location' => 'setLocation',
'quantity' => 'setQuantity',
'price' => 'setPrice',
'total_price' => 'setTotalPrice',
'cost' => 'setCost',
'total_cost' => 'setTotalCost',
'profit' => 'setProfit',
'po_type' => 'setPoType',
'product' => 'setProduct',
'tax' => 'setTax',
'disable_tax' => 'setDisableTax',
'vouching_status' => 'setVouchingStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vendor' => 'getVendor',
'type' => 'getType',
'design' => 'getDesign',
'status' => 'getStatus',
'images' => 'getImages',
'customer_description' => 'getCustomerDescription',
'vendor_description' => 'getVendorDescription',
'notes' => 'getNotes',
'location' => 'getLocation',
'quantity' => 'getQuantity',
'price' => 'getPrice',
'total_price' => 'getTotalPrice',
'cost' => 'getCost',
'total_cost' => 'getTotalCost',
'profit' => 'getProfit',
'po_type' => 'getPoType',
'product' => 'getProduct',
'tax' => 'getTax',
'disable_tax' => 'getDisableTax',
'vouching_status' => 'getVouchingStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['design'] = isset($data['design']) ? $data['design'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['customer_description'] = isset($data['customer_description']) ? $data['customer_description'] : null;
        $this->container['vendor_description'] = isset($data['vendor_description']) ? $data['vendor_description'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['total_cost'] = isset($data['total_cost']) ? $data['total_cost'] : null;
        $this->container['profit'] = isset($data['profit']) ? $data['profit'] : null;
        $this->container['po_type'] = isset($data['po_type']) ? $data['po_type'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['disable_tax'] = isset($data['disable_tax']) ? $data['disable_tax'] : null;
        $this->container['vouching_status'] = isset($data['vouching_status']) ? $data['vouching_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vendor'] === null) {
            $invalidProperties[] = "'vendor' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['design'] === null) {
            $invalidProperties[] = "'design' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['images'] === null) {
            $invalidProperties[] = "'images' can't be null";
        }
        if ($this->container['customer_description'] === null) {
            $invalidProperties[] = "'customer_description' can't be null";
        }
        if ($this->container['vendor_description'] === null) {
            $invalidProperties[] = "'vendor_description' can't be null";
        }
        if ($this->container['notes'] === null) {
            $invalidProperties[] = "'notes' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ($this->container['cost'] === null) {
            $invalidProperties[] = "'cost' can't be null";
        }
        if ($this->container['total_cost'] === null) {
            $invalidProperties[] = "'total_cost' can't be null";
        }
        if ($this->container['profit'] === null) {
            $invalidProperties[] = "'profit' can't be null";
        }
        if ($this->container['po_type'] === null) {
            $invalidProperties[] = "'po_type' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if ($this->container['tax'] === null) {
            $invalidProperties[] = "'tax' can't be null";
        }
        if ($this->container['disable_tax'] === null) {
            $invalidProperties[] = "'disable_tax' can't be null";
        }
        if ($this->container['vouching_status'] === null) {
            $invalidProperties[] = "'vouching_status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vendor
     *
     * @return \Swagger\Client\Model\Vendor
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param \Swagger\Client\Model\Vendor $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets design
     *
     * @return \Swagger\Client\Model\Design
     */
    public function getDesign()
    {
        return $this->container['design'];
    }

    /**
     * Sets design
     *
     * @param \Swagger\Client\Model\Design $design design
     *
     * @return $this
     */
    public function setDesign($design)
    {
        $this->container['design'] = $design;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Swagger\Client\Model\Images1
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Swagger\Client\Model\Images1 $images images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets customer_description
     *
     * @return string
     */
    public function getCustomerDescription()
    {
        return $this->container['customer_description'];
    }

    /**
     * Sets customer_description
     *
     * @param string $customer_description customer_description
     *
     * @return $this
     */
    public function setCustomerDescription($customer_description)
    {
        $this->container['customer_description'] = $customer_description;

        return $this;
    }

    /**
     * Gets vendor_description
     *
     * @return string
     */
    public function getVendorDescription()
    {
        return $this->container['vendor_description'];
    }

    /**
     * Sets vendor_description
     *
     * @param string $vendor_description vendor_description
     *
     * @return $this
     */
    public function setVendorDescription($vendor_description)
    {
        $this->container['vendor_description'] = $vendor_description;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return string
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param string $total_price total_price
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return string
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param string $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return string
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param string $total_cost total_cost
     *
     * @return $this
     */
    public function setTotalCost($total_cost)
    {
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets profit
     *
     * @return string
     */
    public function getProfit()
    {
        return $this->container['profit'];
    }

    /**
     * Sets profit
     *
     * @param string $profit profit
     *
     * @return $this
     */
    public function setProfit($profit)
    {
        $this->container['profit'] = $profit;

        return $this;
    }

    /**
     * Gets po_type
     *
     * @return string
     */
    public function getPoType()
    {
        return $this->container['po_type'];
    }

    /**
     * Sets po_type
     *
     * @param string $po_type po_type
     *
     * @return $this
     */
    public function setPoType($po_type)
    {
        $this->container['po_type'] = $po_type;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \Swagger\Client\Model\Product4
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \Swagger\Client\Model\Product4 $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets disable_tax
     *
     * @return string
     */
    public function getDisableTax()
    {
        return $this->container['disable_tax'];
    }

    /**
     * Sets disable_tax
     *
     * @param string $disable_tax disable_tax
     *
     * @return $this
     */
    public function setDisableTax($disable_tax)
    {
        $this->container['disable_tax'] = $disable_tax;

        return $this;
    }

    /**
     * Gets vouching_status
     *
     * @return string
     */
    public function getVouchingStatus()
    {
        return $this->container['vouching_status'];
    }

    /**
     * Sets vouching_status
     *
     * @param string $vouching_status vouching_status
     *
     * @return $this
     */
    public function setVouchingStatus($vouching_status)
    {
        $this->container['vouching_status'] = $vouching_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
