<?php
/**
 * Variation2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Antera Api v1
 *
 * Antera API v1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Variation2 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Variation2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Variation2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'design_variation_unique_id' => 'string',
'item_image' => 'string[]',
'item_image_thumbnail' => 'string[]',
'design_variation_product' => 'string',
'design_variation_color' => 'string',
'design_variation_location' => 'string',
'design_note' => 'string',
'design_color_thread_pms' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'design_variation_unique_id' => null,
'item_image' => null,
'item_image_thumbnail' => null,
'design_variation_product' => null,
'design_variation_color' => null,
'design_variation_location' => null,
'design_note' => null,
'design_color_thread_pms' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'design_variation_unique_id' => 'design_variation_unique_id',
'item_image' => 'itemImage',
'item_image_thumbnail' => 'itemImageThumbnail',
'design_variation_product' => 'design_variation_product',
'design_variation_color' => 'design_variation_color',
'design_variation_location' => 'design_variation_location',
'design_note' => 'design_note',
'design_color_thread_pms' => 'design_color_thread_pms'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'design_variation_unique_id' => 'setDesignVariationUniqueId',
'item_image' => 'setItemImage',
'item_image_thumbnail' => 'setItemImageThumbnail',
'design_variation_product' => 'setDesignVariationProduct',
'design_variation_color' => 'setDesignVariationColor',
'design_variation_location' => 'setDesignVariationLocation',
'design_note' => 'setDesignNote',
'design_color_thread_pms' => 'setDesignColorThreadPms'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'design_variation_unique_id' => 'getDesignVariationUniqueId',
'item_image' => 'getItemImage',
'item_image_thumbnail' => 'getItemImageThumbnail',
'design_variation_product' => 'getDesignVariationProduct',
'design_variation_color' => 'getDesignVariationColor',
'design_variation_location' => 'getDesignVariationLocation',
'design_note' => 'getDesignNote',
'design_color_thread_pms' => 'getDesignColorThreadPms'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['design_variation_unique_id'] = isset($data['design_variation_unique_id']) ? $data['design_variation_unique_id'] : null;
        $this->container['item_image'] = isset($data['item_image']) ? $data['item_image'] : null;
        $this->container['item_image_thumbnail'] = isset($data['item_image_thumbnail']) ? $data['item_image_thumbnail'] : null;
        $this->container['design_variation_product'] = isset($data['design_variation_product']) ? $data['design_variation_product'] : null;
        $this->container['design_variation_color'] = isset($data['design_variation_color']) ? $data['design_variation_color'] : null;
        $this->container['design_variation_location'] = isset($data['design_variation_location']) ? $data['design_variation_location'] : null;
        $this->container['design_note'] = isset($data['design_note']) ? $data['design_note'] : null;
        $this->container['design_color_thread_pms'] = isset($data['design_color_thread_pms']) ? $data['design_color_thread_pms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['design_variation_unique_id'] === null) {
            $invalidProperties[] = "'design_variation_unique_id' can't be null";
        }
        if ($this->container['item_image'] === null) {
            $invalidProperties[] = "'item_image' can't be null";
        }
        if ($this->container['item_image_thumbnail'] === null) {
            $invalidProperties[] = "'item_image_thumbnail' can't be null";
        }
        if ($this->container['design_variation_product'] === null) {
            $invalidProperties[] = "'design_variation_product' can't be null";
        }
        if ($this->container['design_variation_color'] === null) {
            $invalidProperties[] = "'design_variation_color' can't be null";
        }
        if ($this->container['design_variation_location'] === null) {
            $invalidProperties[] = "'design_variation_location' can't be null";
        }
        if ($this->container['design_note'] === null) {
            $invalidProperties[] = "'design_note' can't be null";
        }
        if ($this->container['design_color_thread_pms'] === null) {
            $invalidProperties[] = "'design_color_thread_pms' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets design_variation_unique_id
     *
     * @return string
     */
    public function getDesignVariationUniqueId()
    {
        return $this->container['design_variation_unique_id'];
    }

    /**
     * Sets design_variation_unique_id
     *
     * @param string $design_variation_unique_id design_variation_unique_id
     *
     * @return $this
     */
    public function setDesignVariationUniqueId($design_variation_unique_id)
    {
        $this->container['design_variation_unique_id'] = $design_variation_unique_id;

        return $this;
    }

    /**
     * Gets item_image
     *
     * @return string[]
     */
    public function getItemImage()
    {
        return $this->container['item_image'];
    }

    /**
     * Sets item_image
     *
     * @param string[] $item_image item_image
     *
     * @return $this
     */
    public function setItemImage($item_image)
    {
        $this->container['item_image'] = $item_image;

        return $this;
    }

    /**
     * Gets item_image_thumbnail
     *
     * @return string[]
     */
    public function getItemImageThumbnail()
    {
        return $this->container['item_image_thumbnail'];
    }

    /**
     * Sets item_image_thumbnail
     *
     * @param string[] $item_image_thumbnail item_image_thumbnail
     *
     * @return $this
     */
    public function setItemImageThumbnail($item_image_thumbnail)
    {
        $this->container['item_image_thumbnail'] = $item_image_thumbnail;

        return $this;
    }

    /**
     * Gets design_variation_product
     *
     * @return string
     */
    public function getDesignVariationProduct()
    {
        return $this->container['design_variation_product'];
    }

    /**
     * Sets design_variation_product
     *
     * @param string $design_variation_product design_variation_product
     *
     * @return $this
     */
    public function setDesignVariationProduct($design_variation_product)
    {
        $this->container['design_variation_product'] = $design_variation_product;

        return $this;
    }

    /**
     * Gets design_variation_color
     *
     * @return string
     */
    public function getDesignVariationColor()
    {
        return $this->container['design_variation_color'];
    }

    /**
     * Sets design_variation_color
     *
     * @param string $design_variation_color design_variation_color
     *
     * @return $this
     */
    public function setDesignVariationColor($design_variation_color)
    {
        $this->container['design_variation_color'] = $design_variation_color;

        return $this;
    }

    /**
     * Gets design_variation_location
     *
     * @return string
     */
    public function getDesignVariationLocation()
    {
        return $this->container['design_variation_location'];
    }

    /**
     * Sets design_variation_location
     *
     * @param string $design_variation_location design_variation_location
     *
     * @return $this
     */
    public function setDesignVariationLocation($design_variation_location)
    {
        $this->container['design_variation_location'] = $design_variation_location;

        return $this;
    }

    /**
     * Gets design_note
     *
     * @return string
     */
    public function getDesignNote()
    {
        return $this->container['design_note'];
    }

    /**
     * Sets design_note
     *
     * @param string $design_note design_note
     *
     * @return $this
     */
    public function setDesignNote($design_note)
    {
        $this->container['design_note'] = $design_note;

        return $this;
    }

    /**
     * Gets design_color_thread_pms
     *
     * @return string[]
     */
    public function getDesignColorThreadPms()
    {
        return $this->container['design_color_thread_pms'];
    }

    /**
     * Sets design_color_thread_pms
     *
     * @param string[] $design_color_thread_pms design_color_thread_pms
     *
     * @return $this
     */
    public function setDesignColorThreadPms($design_color_thread_pms)
    {
        $this->container['design_color_thread_pms'] = $design_color_thread_pms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
